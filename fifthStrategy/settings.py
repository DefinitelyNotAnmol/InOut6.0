"""
Django settings for fifthStrategy project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import logging
import os

from colorlog import ColoredFormatter
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ["DEBUG"]

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'stats', 
    'signin',
    'paypal.standard.ipn',
    'rest_framework',
    'payment'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'fifthStrategy.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'fifthStrategy.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ["DB_NAME"],
        'USER':os.environ["DB_USER"],
        'PASSWORD':os.environ["DB_PASSWORD"],
        'HOST':os.environ["DB_HOST"],
        'PORT':os.environ["DB_PORT"],
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'


#paypal Integration
PAYPAL_RECEIVER_EMAIL = os.environ["PAYPAL_RECEIVER_EMAIL"]
PAYPAL_TEST = os.environ["PAYPAL_TEST"]



## cloured logging using colourlog library
LOG_LEVEL = logging.DEBUG
LOG_FORMAT = (
    "%(log_color)s%(asctime)s,%(msecs)d %(levelname)-8s%(reset)s | "
    "%(log_color)s[%(pathname)s:%(filename)s:%(funcName)s:%(lineno)d] %(message)s%(reset)s"
)

DEFAULT_LOG_COLORS = {
    "DEBUG": "purple",
    "INFO": "blue",
    "WARNING": "yellow",
    "ERROR": "bold_red",
    "CRITICAL": "bold_red",
}

DATE_FORMAT = "%Y-%m-%d:%H:%M:%S"
SHORT_DATE_FORMAT = "Y-m-d"

logging.root.setLevel(LOG_LEVEL)
FORMATTER = ColoredFormatter(
    LOG_FORMAT, DATE_FORMAT, log_colors=DEFAULT_LOG_COLORS
)
STREAM = logging.StreamHandler()
STREAM.setLevel(LOG_LEVEL)
STREAM.setFormatter(FORMATTER)

LOG = logging.getLogger("pythonConfig")
LOG.setLevel(LOG_LEVEL)
LOG.addHandler(STREAM)
